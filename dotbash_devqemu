#!/bin/bash
#
# .bashrc_devqemu
#
# Bash helpers for running development builds of QEMU
#

MY_USER=`id -u`
MY_GRP=`id -g`
USERSPEC="--userspec ${MY_USER}:${MY_GRP}"

# General paramters - these don't use QEMU env variables
DEVQEMU_SRC=/home/alex/lsrc/qemu/qemu.git
DEVQEMU_ARCH=aarch64
DEVQEMU_BUILD=${DEVQEMU_SRC}/${DEVQEMU_ARCH}-linux-user
DEVQEMU_BIN=qemu-${DEVQEMU_ARCH}

# Root of all rootfs
DEVQEMU_ROOTFS_ROOT=/home/alex/lsrc/qemu/rootfs

DEVQEMU_PROFILE=""

: ${DEVQEMU_ROOTFS:=${DEVQEMU_ROOTFS_ROOT}/opensuse-arm64-rootfs}

# Actual QEMU Environment Variables
# you need to ensure sudo is configured to allow them through
: ${QEMU_LOG_FILENAME:=/tmp/qemu.log}
: ${QEMU_LOG:="unimp"}
# unimp,int,exec,cpu,op,out_asm


function devqemu_run
{
    echo "Copying ${DEVQEMU_BUILD}/${DEVQEMU_BIN} to ${DEVQEMU_ROOTFS}/bin/"
    sudo cp ${DEVQEMU_BUILD}/${DEVQEMU_BIN} ${DEVQEMU_ROOTFS}/bin/
    CMD="/bin/${DEVQEMU_BIN}"
    echo "Using chroot: ${DEVQEMU_ROOTFS}"
    export QEMU_LOG
    export QEMU_LOG_FILENAME
    echo "Env: QEMU_LOG=${QEMU_LOG}, QEMU_LOG_FILENAME=${QEMU_LOG_FILENAME}"
    echo "Running: ${CMD} with $# args ($@)"
    sudo ${DEVQEMU_PROFILE} chroot ${USERSPEC} ${DEVQEMU_ROOTFS} ${CMD} "$@"
}

function devqemu_run_as_root
{
    echo "Copying ${DEVQEMU_BUILD}/${DEVQEMU_BIN} to ${DEVQEMU_ROOTFS}/bin/"
    sudo cp ${DEVQEMU_BUILD}/${DEVQEMU_BIN} ${DEVQEMU_ROOTFS}/bin/
    CMD="/bin/${DEVQEMU_BIN}"
    echo "Using chroot: ${DEVQEMU_ROOTFS}"
    export QEMU_LOG
    export QEMU_LOG_FILENAME
    echo "Env: QEMU_LOG=${QEMU_LOG}, QEMU_LOG_FILENAME=${QEMU_LOG_FILENAME}"
    echo "Running: ${CMD} with $# args ($@)"
    sudo ${DEVQEMU_PROFILE} chroot ${DEVQEMU_ROOTFS} ${CMD} "$@"
}

function devqemu_arch
{
    echo "Current ARCH=${DEVQEMU_ARCH}"
    read -e -p "ARCH:" NEW_ARCH
    DEVQEMU_ARCH=${NEW_ARCH}
    DEVQEMU_BUILD=${DEVQEMU_SRC}/${DEVQEMU_ARCH}-linux-user
    DEVQEMU_BIN=qemu-${DEVQEMU_ARCH}
    echo "New ARCH=${DEVQEMU_ARCH}"
    echo "With ${DEVQEMU_BIN} from ${DEVQEMU_BUILD}"
}

function devqemu_profile
{
    OLD_DEVQEMU_PROFILE=${DEVQEMU_PROFILE}
    if [ -z "$@" ]; then
        unset DEVQEMU_PROFILE
        echo "Disabled profiling of qemu"
    else
        DEVQEMU_PROFILE="$@"
        echo "Using DEVQEMU_PROFILE=${DEVQEMU_PROFILE} (was ${OLD_DEVQEMU_PROFILE})"
    fi
}

function devqemu_log
{
    OLD_QEMU_LOG=${QEMU_LOG}
    if [ -z "$@" ]; then
        QEMU_LOG=unimp
    else
        QEMU_LOG=$@
    fi
    echo "Set QEMU_LOG to ${QEMU_LOG} (were ${OLD_QEMU_LOG})"
}

function devqemu_logfile
{
    OLD_QEMU_LOG_FILENAME=${QEMU_LOG_FILENAME}
    if [ -z "$@" ]; then
        unset QEMU_LOG_FILENAME
        echo "Disabled QEMU_LOG_FILENAME (debug will go to stderr)"
    else
        QEMU_LOG_FILENAME=$@
        echo "Set QEMU_LOG_FILENAME to ${QEMU_LOG_FILENAME} (was ${OLD_QEMU_LOG_FILENAME})"
    fi
}

function devqemu_debug
{
    OLD_DEVQEMU_GDB=${DEVQEMU_GDB}
    if [ -z "$@" ]; then
        unset DEVQEMU_GDB
        echo "Disabled DEVQEMU_DEBUG"
    else
        DEVQEMU_GDB=$@
        echo "Set DEVQEMU_DEBUG to ${DEVQEMU_GDB} (was ${OLD_DEVQEMU_GDB})"
    fi
}

function devqemu_rootfs
{
    OLD_DEVQEMU_ROOTFS=${DEVQEMU_ROOTFS}
    CURRENT_PWD=`pwd`
    cd ${DEVQEMU_ROOTFS_ROOT}
    DIRS=`compgen -d`
    read -e -p "dir:" NEW_ROOTFS
    DEVQEMU_ROOTFS=${DEVQEMU_ROOTFS_ROOT}/${NEW_ROOTFS}
    echo "Set rootfs to ${DEVQEMU_ROOTFS} (was ${OLD_DEVQEMU_ROOTFS})"
    cd -
}

function do_bind_mount
{
    SRC=$1
    DST=$2
    for i in `cat /proc/mounts | cut -d' ' -f2`; do
        if [ "x${DST}" = "x$i" ]; then
            echo "Skipping already mounted ${DST}"
            return
        fi
    done
    sudo mount -o bind ${SRC} ${DST}
}


function devqemu_setup_mounts
{
    # Useful host hooks
    do_bind_mount /home ${DEVQEMU_ROOTFS}/home
    mkdir -p ${DEVQEMU_ROOTFS}/root/risu
    do_bind_mount /home/alex/lsrc/qemu/risu.git ${DEVQEMU_ROOTFS}/root/risu/
    mkdir -p ${DEVQEMU_ROOTFS}/host-etc
    do_bind_mount /etc ${DEVQEMU_ROOTFS}/host-etc

    # Magic dirs
    do_bind_mount /proc ${DEVQEMU_ROOTFS}/proc
    do_bind_mount /dev ${DEVQEMU_ROOTFS}/dev
    do_bind_mount /dev/pts ${DEVQEMU_ROOTFS}/dev/pts
    do_bind_mount /tmp ${DEVQEMU_ROOTFS}/tmp
}

function devqemu_clear_mounts
{
    sudo umount ${DEVQEMU_ROOTFS}/home
    sudo umount ${DEVQEMU_ROOTFS}/root/risu/
    sudo umount ${DEVQEMU_ROOTFS}/host-etc
    sudo umount ${DEVQEMU_ROOTFS}/proc
    sudo umount ${DEVQEMU_ROOTFS}/dev
    sudo umount ${DEVQEMU_ROOTFS}/dev/pts
    sudo umount ${DEVQEMU_ROOTFS}/tmp
}

function devqemu_clear_all_mounts
{
    for i in `cat /proc/mounts | cut -d' ' -f2`; do
        if [[ $i == ${DEVQEMU_ROOTFS_ROOT}* ]]; then
            sudo umount $i
        fi
    done
}

function kill_qemu
{
    DEVQEMU_PID_CMD="ps -o comm,pid -C $DEVQEMU_BIN | awk '\$1 == \"$DEVQEMU_BIN\" { print \$2 }'"
    echo "DEVQEMU_PID_CMD=${DEVQEMU_PID_CMD}"
    DEVQEMU_PID=`${DEVQEMU_PID_CMD}`
    echo "kill -9 $DEVQEMU_PID"
}

function devqemu_help
{
    $all_fns=`compgen -A function devqemu`
    echo <<EOF
The devqemu shell environment is a set of scripts for running development versions
of QEMU from the shell. The following functions are available:

$all_fns
EOF

}

function devqemu
{
    $cmdfn=devqemu_$1
    echo "testing: $cmdfn"
    if [[ "type -t $cmdfn > /dev/null" ]]; then
        $cmdfn
    else
        devqemu_help
    fi
}

alias .qemu=". ~/.bash_devqemu"
alias .devqemu=". ~/.bash_devqemu"

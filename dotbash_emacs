#!/bin/bash
#
# Alex's .bashrc_emacs
#
# Emacs Specific setup
#
# There is only one editor (although I can get to it in different ways).
# For most stuff I want to use emacsclient to spawn a quick shell and
# for emacs 23 I want to ensure the daemon is always running for the user.
#
# Luckily this is covered by specifying -a '' which will spawn a daemon if
# one is not running
#

# I don't want to bring up daemons on every machine

START_DAEMON=1
EMACS_DAEMON=0
machine=`hostname`

if [ "${DISPLAY}" ]; then
    for emacs_daemon_machine in zen danny trent symbiot
    do
	if [[ "$machine" == "$emacs_daemon_machine" ]]; then
	    EMACS_DAEMON=1
	fi
    done
else
    for emacs_daemon_machine in zen socrates localhost
    do
	if [[ "$machine" == "$emacs_daemon_machine" ]]; then
	    EMACS_DAEMON=1
	fi
    done
fi
COMPILED_EMACS_PATH=$(find_directories "${HOME}/src/emacs" "/export/src/emacs")
# I may already have the latest and greatest, so use whatever is appropriate
if [[ -d "$COMPILED_EMACS_PATH" && -e "$COMPILED_EMACS_PATH/install/bin/emacs" ]]; then
    system_version=`emacs --version | head -n 1 | cut -d ' ' -f 3`
    compiled_version=`$COMPILED_EMACS_PATH/install/bin/emacs --version | head -n 1 | cut -d ' ' -f 3`
    $(vercomp $compiled_version $system_version)
    #echo "comparing $compiled_version to $system_version got $?"
    if [[ "$?" == "1" || "$?" == "0" ]]; then
	# add_to_world from main bash profile
	add_to_world $COMPILED_EMACS_PATH
	START_DAEMON=0
    fi
fi

if [[ "${EMACS_DAEMON}" -gt 0 ]]; then
    if [[ "$DISPLAY" == "" || "${SSH_TTY}" ]]; then
    # Can we use muti-tty?
	emacsclient --help 2>&1 | grep "\-\-tty" > /dev/null
	if [[ "$?" == "0" ]]; then
        # Thats a yes
	    EMACS_CMD="emacsclient"
	    EMACS_ARGS="-a '' -t"
	else
        # Hmmm, opening in another pane would be a pain?
            EMACS_CMD="emacs"
	    EMACS_ARGS="-nw"
	fi
    else
    # otherwise open a new frame
	EMACS_CMD="emacsclient"
	EMACS_ARGS="-a '' -c"
    # No wait only makes sense for interactive, GUI frame sessions
	EMACS_NW="-n"
    fi
    alias ect="emacsclient -a '' -t"
else
    EMACS_CMD="emacs"
    EMACS_ARGS="-nw"
fi

# Set the environment variables for the editors, remember that programs like
# git or crontab -e will get confused if they don't wait for the editor to return.
export EDITOR="${EMACS_CMD} ${EMACS_ARGS} "
export VISUAL="${EMACS_CMD} ${EMACS_ARGS} "
export ALTERNATE_EDITOR=emacs

# shortcut
alias ec="${EMACS_CMD} ${EMACS_NW} ${EMACS_ARGS}"

# And finally lets get the status of the emacs server, this is a little racy
# but better than it was before...
if [[ "${EMACS_DAEMON}" -gt 0 ]]; then
    EMACS_PROCS=`ps -u $USER -o time,command | grep "emacs"`
    RUNNING=`echo $EMACS_PROCS | wc -l`
    if [ "$RUNNING" == "0" ]; then
 	if [[ "${START_DAEMON}" -gt 0 ]]; then
		DT=`emacsclient -a '' -e "(server-running-p)" 2> /dev/null`
	else
		DT="Not checked"
	fi
    else
        # Check if emacs --daemon has already been invoked...
	DAEMON=`echo $EMACS_PROCS | grep -c "\-\-daemon"`
 	if [[ "${START_DAEMON}" -gt 0 ]]; then
	    if [ "$DAEMON" == "0" ]; then
		DT=`emacsclient -a '' -e "(server-running-p)" 2> /dev/null`
	    else
                # Otherwise don't spawn a new one if you can't connect
	        DT=`emacsclient -a '/bin/false' -e "(server-running-p)" 2> /dev/null`
	    fi
	else
	    DT="Not checked (b)"
	fi
    fi
    REPORT="server-running-p=${DT}"
else
    REPORT="not spawned a daemon"
fi

#
# If I've been using a screen session while physically next to
# the box I'll have an EDITOR etc set up for new X frames. However
# if I then login remotely I'll be wanting to spawn --tty frames
# for new cases.
#
function switch_emacs_to_terminal()
{
    if [ "${EMACS_CMD}" == "emacsclient" ]; then
	export EDITOR="${EMACS_CMD} -a '' -t "
	export VISUAL="${EMACS_CMD} -a '' -t "
	export ALTERNATE_EDITOR="emacs -nw"

	echo "Emacs clients now in terminal mode"
    fi
}

function use_zile_for_visual()
{
    ZILE=$(find_alternatives "zile")
    if [[ -x "${ZILE}" ]]; then
	export EDITOR=${ZILE}
	export VISUAL=${ZILE}
	echo "Enabled VISUAL=${VISUAL}"
    fi
}

function use_emacs_for_visual()
{
    ZILE=$(find_alternatives "zile")
    if [[ -x "${ZILE}" ]]; then
	export EDITOR="${EMACS_CMD} ${EMACS_ARGS} "
	export VISUAL="${EMACS_CMD} ${EMACS_ARGS} "
	echo "Enabled VISUAL=${VISUAL}"
    fi
}


#
# Handle key remapping
#
XCAPE_PATH=$(find_directories "${HOME}/src/emacs/xcape.git")
if [[ -d "${XCAPE_PATH}" && -e "${XCAPE_PATH}/xcape" ]]; then
    PATH=$XCAPE_PATH:$PATH
fi

XKBMAP=$(find_alternatives "setxkbmap")
XMODMAP=$(find_alternatives "xmodmap")
XCAPE=$(find_alternatives "xcape")
KEYMAPS=""

if [ "${DISPLAY}" ]; then
    if [ -e ${XMODMAP} ]; then
        # if this dies you may need to replace the Caps_Lock keydef
        # xmodmap -e "keycode 66 = Caps_Lock"
        ${XMODMAP} -e 'remove Lock = Caps_Lock' 2> /dev/null
        ${XMODMAP} -e 'keysym Caps_Lock = Control_L' 2> /dev/null
        ${XMODMAP} -e 'add Control = Control_L'
        KEYMAPS="${KEYMAPS} Caps->Ctrl"
    fi

    if [ -e ${XCAPE} ]; then
        killall xcape 2> /dev/null
        ${XMODMAP} -e 'keycode 36 = 0x1234'
        ${XMODMAP} -e 'add control = 0x1234'
        ${XMODMAP} -e 'keycode any = Return'
        ${XCAPE} -e '0x1234=Return'
        KEYMAPS="${KEYMAPS} StRet->Ctrl"
    fi
else
    if [ -e ${XKBMAP} ]; then
        setxkbmap -layout gb -option "ctrl:nocaps"
        KEYMAPS="${KEYMAPS} Caps->Ctrl (console)"
    fi
fi

#
# These two functions come from eproject/contrib/eproject.sh
# and allow basic shell navigation based on current project or
# finding the root of the current directory.
#

# Go to currently active project root in Emacs
cdp() {
    local EMACS_CWP=$(emacsclient -a false -e \
        "(eproject-current-working-directory)" \
        | sed 's/^"\(.*\)"$/\1/')
    if [ -d "$EMACS_CWP" ]; then
        cd "$EMACS_CWP"
    else
        return 1
    fi
}

# Go to the top of the project root of the current directory
cdtp() {
    local tmp_dir=$(pwd)
    local tmp_file=$(mktemp -p "$tmp_dir" -t ".cdeprj_XXXXX")
    local elisp="(let ((tmp \"$tmp_file\")) (with-temp-file tmp (setq buffer-file-name tmp) (eproject-maybe-turn-on)))"
    local EMACS_CWP=$(emacsclient -a false -e "${elisp}" | sed 's/^"\(.*\)"$/\1/')
    rm -f ${tmp_file}
    if [ -d "$EMACS_CWP" ]; then
        cd "$EMACS_CWP"
    else
        return 1
    fi
}


alias .emacs=". ~/.bash_emacs"
echo "loading .bash_emacs (Using: `which $EMACS_CMD` and $REPORT $KEYMAPS)"


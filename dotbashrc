#!/bin/bash
#
# Alexs .bashrc
# loaded by bash when any non-login shell started

#
# Source global definitions
#

#echo "Starting ajb's .bashrc $*"

#For debuging when we are interactive or non-interactive (tty)
#
#ENVLOG=~/tmp/env`date +%s`.log
#env > $ENVLOG
#echo "ARGS=$*" >> $ENVLOG
#PID=$$
#echo "PID=$PID"  >> $ENVLOG
#cat /proc/$PID/cmdline >> $ENVLOG
#echo "pstree" >> $ENVLOG
#pstree -p >> $ENVLOG

# If ssh is conecting to run a command it has no controlling TTY
INTERACTIVE=true
if [ "$SSH_CLIENT" != "" ]; then
  if [ "$SSH_TTY" == "" ]; then
      INTERACTIVE=false
  fi
fi

#if [ "$INTERACTIVE" == "true" ]; then
#  echo "Assuming interactive shell"
#fi

if [ -f /etc/bashrc ]; then
    source /etc/bashrc
fi

if [ -f /etc/bash.bashrc ]; then
    source /etc/bash.bashrc
fi

#############
# Aliases
#############

# I like a quick grep of history
alias h="history | grep"

# Find a given export in history
function he
{
    if [ "$1" ]
    then
       history | grep -E "^ [0-9]+  export $1" | uniq -s 6 -u
    fi
}

# Search through a list of alternative binaries, returning the first match
function find_alternatives ()
{
    for arg in "$@"
    do
      file=`which $arg 2> /dev/null`
      if [ -x "$file" ]; then
	  echo "$file"
	  return
      fi
    done
}


#
# Lets see if we have a decent "grep"
#
GREP=$(find_alternatives "ggrep" "grep")
alias grep="$GREP"

#
# Look for a decent diff
#
DIFF=$(find_alternatives "gdiff" "diff")
alias diff="$DIFF"


#
# Some systems I use don't have a decent 'find' implentation so
#

# Lets look for gfind first (The GNU find on Solaris)
FIND=$(find_alternatives "gfind" "find")
alias find="$FIND"

FIND_VERSION=`find --version 2>/dev/null`
if [  "${FIND_VERSION:0:8}" == "GNU find" ]; then

    # Some nice find expressions
    FIND_BACKUPS=" -name '.#*' -o -name '#*#' -o -name '*\.~*.~' -o -path '*./CVS/*.'"
    FIND_CVS=" -path '*./CVS/.*' "
    FIND_CCODE="  -iname '*.[chS]' -or -iname '*.cc' "
    FIND_CHEAD=" -iname '*.h' "
        
    # and search code for stuff (when I figure out proper expansion and quuting I'll make this neater)
    
    #alias sc="find . -iname '*.[chS]' -or -iname '*.cc' -and -not \( -name '.#' -o -name '#*#' -o -name '*\.~*.~' -o -path '*./CVS/*.' \) -print0 | xargs -0 grep -H "

    alias f="$FIND -iname"
    alias sc="$FIND . \( $FIND_CCODE \) -and -not \( $FIND_BACKUPS -o $FIND_CVS \) -print0 | xargs -0 grep -H"
#    alias sh="find . -iname '*.h' -print0 | xargs -0 grep -H "
    alias sa="$FIND . -xtype f -print0 | xargs -0 grep -H "
else
    #
    # Who knows how standard unix is, its not GNU so probably not
    #
    # Lets assume both find and grep are borken
    #

    # Find files under here
    alias f="$FIND . -name"

    # and search code for stuff
    alias sc="$FIND . -name '*.[chS]' -o  -name '*.cc' | xargs grep "
#    alias sh="find . -name '*.h' | xargs grep "
    alias sa="$FIND -L . -type f | xargs grep "
fi    


# create patches easily
export DIFFIGNORE="-X~/.diffignore "
alias mkpatch="diff -Naur $DIFFIGNORE "

# Make creating an isofs easy
alias mkcdimg="mkisofs -v -R -o ~/tmp/temp.iso "


######################
# Environent Variables
######################

# There is only one editor
export EDITOR=emacs

# set CFLAGS for debugging - autoconf usually picks it up.
export CFLAGS=-g3

# CVS exports
export CVS_RSH=ssh
export CVSEDITOR=emacs

# Setup history control - hard to get right, could do with
# bashcompletion as well. Just make sure I don't repeatedly delete stuff

# append (as I use lots of shells)
shopt -s histappend

# Dump history to the file each prompt
PROMPT_COMMAND='history -a'

export HISTCONTROL=ignoredups
export HISTIGNORE="rm*"
export HISTFILESIZE=10000

# I have stuff in ~/bin
if [ -d $HOME/bin ]; then
  export PATH=~/bin:$PATH
fi

# Working with DBT's all day makes you want to know what your arch is
# However some linux machines can't give you a processor with uname -p

PROC=`uname -m`
if [ "$PROC" == "unknown" ]; then
  PROC=`uname -m`
fi

# Setup the prompt to show who I am and on what machine
export PS1="\A \u@\h/$PROC [\W] >"

# GNU systems usually use less by default for
# man pages, however not all unix-a-likes do
export PAGER=less

#
# GIT env
#
export GIT_AUTHOR_NAME="Alex Bennee"
export GIT_AUTHOR_EMAIL="alex@bennee.com"
export GIT_COMMITTER_NAME="Alex Bennee"

########################
# Miscelaneous Stuff
########################
# I want core-dumps dammit
ulimit -S -c unlimited

#
# Now source any local bashrc's which can overide stuff
# or add stuff relevant to the system I am on
#
# We only want this for interactive shells as remote
# noise just gets in the way.

if [ "$INTERACTIVE" == "true" ]; then

  # If we have apt on this system I'll want some
  # debian like shortcuts
  APT=$(find_alternatives "apt")
  if [[ -f $APT && -f $HOME/.bashrc_apt ]]; then
    echo "loading .bashrc_apt"
    source $HOME/.bashrc_apt
  fi
  unset APT

  # Gentoo Stuff
  EMERGE=$(find_alternatives "emerge")
  if [[ -f $APT && -f $HOME/.bashrc_gentoo ]]; then
    if [ -d /usr/portage ]; then
      echo "loading .bashrc_gentoo"
      source $HOME/.bashrc_gentoo
    fi
  fi
  unset EMERGE
  
  # Generic local configs for work and stuff
  if [ -f $HOME/.bashrc_local ]; then
    echo "loading .bashrc_local"
    source $HOME/.bashrc_local
  fi

fi
